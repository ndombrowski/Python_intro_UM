{
  "hash": "b637553501a06da42749e410ea913804",
  "result": {
    "markdown": "# Expressions\n\n## Constants\n\n- Fixed values such as numbers, letters and strings are called constants because their values don't change\n- Numeric constants look like this `123`\n- String constants use single or double quotes\n\n## Reserved words\n\n- Words that have a special meaning in python\n- You can not use them as variable names/identifiers\n- Examples; False, None, and, as, break, else, etc.\n\n## Variables\n\n- A variable is a named place in the memory where a programmer can store and later retrieve data using the variable name\n- Programmers get to choose the names of the variables\n- You can change the contents of a variable in a later statement\n\nNaming rules for variables:\n\n- You can start variables with letters or underscores, but we try to avoid underscores because python uses underscores for its own purposes\n- Must consist of letters, numbers, underscores\n- Case sensitive, ideally use mostly use lowercase\n- Choose a sensible variable name that makes sense to other people who might read our code\n\n### Assignment Statements\n\n- We assign a value to a variable using the assignment statement `=`\n- An assignment statement consists of an **expression** on the right hand side and a variable to store the result\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\n# assign a number to the variable x and store it in memory\nx = 12.2\nx\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n12.2\n```\n:::\n:::\n\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\n# assign a different number to x\nx = 100\nx\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```\n100\n```\n:::\n:::\n\n\n## Operator precedence\n\n- The general order is: Parenthesis --> Power --> Multiplication --> Addition --> Left to right\n- When writing code: Use parenthesis\n- When writing code: keep mathematical expressions simple enough so that they are easy to understand\n- Break long series of mathematical operations up to make them more clear\n\n\n## What are types?\n\n- In Python variables, literals and constants have a type\n- Py knows the difference between an integer number and a string\n- Some operations are prohibited, i.e. you and not add 1 to a string \n\n```\n'hello' + 1\n```\n\n- You can identify the type by using the function `type()`\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\ntype(1)\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\nint\n```\n:::\n:::\n\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\ntype('hello')\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\nstr\n```\n:::\n:::\n\n\nNumbers have two main types:\n\n- Integers are whole numbers, i.e. -14, 0, 123\n- Floating numbers have decimal parts and more range but less precision than integers: -2.5, 0.0, 13.0\n\n\n## Type conversions\n\n- When you put an integer and a floating point in an expression, the integer is implicitly converted to a float\n- You can control the type using the functions `int()` and `float()`\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\nprint(float(99) + 100)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n199.0\n```\n:::\n:::\n\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\nint(99.1)\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\n99\n```\n:::\n:::\n\n\n## Py2 versus Py3 differences:\n\nIn Py2 9/2 gives 4 while in Py3 it gives 4.5. The reason was that Py2 kept results as integers while Py3 automatically converts them to floats.\n\n\n\n## String conversions\n\n- You can use `int()` and `float()` to convert between strings and integers\n- You will get an error if the string does not contain numeric numbers\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\nsval = '123'\ntype(sval)\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\nstr\n```\n:::\n:::\n\n\nThis would get an error: `sval + 1` and we first need to convert the string to an integer:\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\nint(sval) +1\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\n124\n```\n:::\n:::\n\n\nWe also would get an error with `int('hello bob')`, since this string does not contain any digits\n\n\n## User Input\n\n- We can instruct python to pause and read data from the user using the `input()` function\n- The `input()` function returns a string\n\n```\nnam = input('who are you?')\nprint('Welcome', nam)\n```\n\nIn the example above, the comma will behave as a space in the output.\n\n\n## Comments in python\n\n- Everything after a `#` is ignored by Py\n- Why comment?\n    - Describe what is going to happen in a sequence of code\n    - Document who wrote the code or add useful info\n    - Turn off a line of code\n\n\n\n## Our first code\n\n- The goal is to read a number from the user and convert it to a string number.  \n- We want to convert ground floors that start with the 0 or the 1st floor.\n- The executable example will be found in `convert_user_input.py`\n\nIn the code below, the user input is a string, so we need to convert it to an integer first in the code.\n\n```\n#convert european to US  elevator floors\ninp = input('Europe floor? \\n')\nusf = int(inp) + 1\nprint('European floor', inp, 'is this floor in the US:', usf)\n```\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\nx = int(98.6)\nx\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```\n98\n```\n:::\n:::\n\n\n## Exercise\n\nWrite a program to prompt the user for hours and rate per hour using input to compute gross pay. Use 35 hours and a rate of 2.75 per hour to test the program (the pay should be 96.25). You should use input to read a string and float() to convert the string to a number. Do not worry about error checking or bad user data.\n\nThis script will be found in `calculate_pay.py`\n\n```\n# Ask for hours and rate\nhrs = input(\"Enter Hours:\\n\")\nrate = input(\"Enter Rate:\\n\")\n\n#do math\npay = float(hrs) * float(rate)\n\n#print\nprint('Pay:', pay)\n```\n\n",
    "supporting": [
      "2_expressions_files"
    ],
    "filters": [],
    "includes": {}
  }
}