{
  "hash": "1417ea61529fc758bb34b95c5c136b6f",
  "result": {
    "markdown": "# Programming for everyone\n\n## Hardware\n\n- **Central Processing Unit (CPU)**: electronic machinery that carries out instructions from programs that allows a computer or other device to perform its tasks. Its goal is to run the program, its dumb but very fast.\n- Input devices: Keyboard, Mouse, Touch screen\n- Output devices: Screen, Speakers, Printer, DVD burner\n- When you write a program you create a file on the **secondary memory**, like a Python file, and then at some point that is loaded into the **main memory** and translated. And then when the CPU says what next, your program feeds its first instruction, the second instruction, third instruction, fourth instruction. It's called the **fetch-execute cycle**. And these two parts, the CPU and the main memory, are what participate in this cycle.\n- In contrast to main memory, the fast small temporary storage where data is lost on Reboot (=RAM), data/programs stored on the secondary memory, which is slower and larger (= disk drive, memory stick),  is permanent.\n\n\n## Writing Paragraphs of Code\n\n- **Reserved words**: if we use these words, we must use them to mean the thing that Python expects them to mean. Another way to put that is we can't use them elsewhere.\n- **Python scripts** : stored sets of instruction in text files that you can then hand to Python to run them. By convention end with .py. \n\nLet's first start by doing some **Sequential steps** in python. Here, we flow from one step to the next, i.e. we set up paths for the program to follow. Sequential flow is not indented.\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\n#write an assignment statement\nx = 1\n\n#do some math\ny = x + 1\n\n#use the print function\nprint(y)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n2\n```\n:::\n:::\n\n\nWhen we write **conditional statements**, i.e. if x is less than 10 evaluates to true, then it's going to execute; otherwise, it's going to be skipped. The **if** statement is an example of a reserved word.\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nx = 5\n\nif x < 10:\n    print(\"Smaller\")\nif x > 20:\n    print(\"Bigger\")\n    \nprint(\"Finis\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSmaller\nFinis\n```\n:::\n:::\n\n\nFinally, lets have a look at **repeat statements**. A repeat statement defines a set of statements to be executed until a condition that is evaluated at the end of the REPEAT loop is true. The repeat-loop-condition is evaluated at the completion of each iteration of the loop.\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nn = 5\n\nwhile n > 0:\n    print(n)\n    n = n-1\n    \nprint(\"Blastoff!\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n5\n4\n3\n2\n1\nBlastoff!\n```\n:::\n:::\n\n\nHere, the while statement asks: Is n greater than 0? If this is true then the code below is run.\nBy having the same indents, we can have more than one statement within each level. \n\nA loop (repeated steps) has iteration variables, that change each time we go trough the loop.\n\n\n\n## Doing the \"Hello World\" Assignment\n\n",
    "supporting": [
      "1_introduction_files"
    ],
    "filters": []
  }
}