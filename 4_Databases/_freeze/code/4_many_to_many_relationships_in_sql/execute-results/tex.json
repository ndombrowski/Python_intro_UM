{
  "hash": "fef58bcf8323fc6387275f4bbfd81a4e",
  "result": {
    "markdown": "# Many to many relationships\n\n## Introduction\n\n- Sometimes we need to model a relationship with many-to-many (so far we just had examples for one-to-many)\n- I.e. one author might link to several books and one book might have multiple authors\n- We need to add a \"connection\" table, or a junction table, with 2 foreign keys that models the connection between i.e. the books and author table\n- There usually is no separate primary key\n\n<img width=500, src=\"../images/many_ex.png\">\n\nLet's make an example in the sqlite browser by first making a fresh db:\n\n```\nCREATE TABLE User (\n    id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT UNIQUE,\n    name TEXT,\n    email TEXT\n);\n\nCREATE TABLE Course (\n    id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT UNIQUE,\n    title TEXT\n);\n\nCREATE TABLE Member (\n    user_id INTEGER,\n    course_id INTEGER,\n    role INTEGER,\n    PRIMARY KEY (user_id, course_id)\n)\n```\n\nNow we can enter some data:\n\n```\nINSERT INTO User (name, email) VALUES ('Jane', 'jane@tsugi.org');\nINSERT INTO User (name, email) VALUES ('Ed', 'ed@tsugi.org');\nINSERT INTO User (name, email) VALUES ('Sue', 'su@tsugi.org');\n\nINSERT INTO Course (title) VALUES ('Python');\nINSERT INTO Course (title) VALUES ('SQL');\nINSERT INTO Course (title) VALUES ('PHP')\n```\n\nAdd some data into the member column , separated by courses:\n\n```\nINSERT INTO Member (user_id, course_id, role) VALUES (1, 1, 1);\nINSERT INTO Member (user_id, course_id, role) VALUES (2, 1, 0);\nINSERT INTO Member (user_id, course_id, role) VALUES (3, 1, 0);\n  \nINSERT INTO Member (user_id, course_id, role) VALUES (1, 2, 0);\nINSERT INTO Member (user_id, course_id, role) VALUES (2, 2, 1);\n  \nINSERT INTO Member (user_id, course_id, role) VALUES (2, 3, 1);\nINSERT INTO Member (user_id, course_id, role) VALUES (3, 3, 0);\n```\n\nNow, we can make a combined table:\n\n```\nSELECT User.name, Member.role, Course.title\nFROM User Join Member JOIN Course\nOn Member.user_id = User.id AND Member.course_id = Course.id\nORDER BY course.title, Member.role DESC, User.name\n```\n\n\n## Worked example\n\nCode found in `code/roster.py`\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport json\nimport sqlite3\n\nconn = sqlite3.connect('roster.db.sqlite')\ncur = conn.cursor()\n\n#Setup\n#executescript allows multiple SQL statements separated by semicolons\ncur.executescript('''\nDROP TABLE IF EXISTS User;\nDROP TABLE IF EXISTS Member;\nDROP TABLE IF EXISTS Course;\n\nCREATE TABLE User (\n    id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT UNIQUE,\n    name TEXT UNIQUE\n);\n\nCREATE TABLE Course (\n    id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT UNIQUE,\n    title TEXT UNIQUE\n);\n\nCREATE TABLE Member (\n    user_id INTEGER,\n    course_id INTEGER,\n    role INTEGER,\n    PRIMARY KEY (user_id, course_id)\n)\n''')\n\n#read in data with course info\nfname = '../data/roster_data_sample.json'\nstr_data = open(fname).read()\njson_data = json.loads(str_data)\n\nfor entry in json_data:\n    name = entry[0]\n    title = entry[1]\n    #print((name, title))\n\n    cur.execute('''INSERT OR IGNORE INTO User (name)\n        VALUES (?)''',(name,) )\n    cur.execute('SELECT id FROM User WHERE name = ?', (name,))\n    user_id = cur.fetchone()[0]\n\n    cur.execute('''INSERT OR IGNORE INTO Course (title)\n        VALUES (?)''',(title,) )\n    cur.execute('SELECT id FROM Course WHERE title = ?', (title,))\n    course_id = cur.fetchone()[0]\n\n    cur.execute('''INSERT OR REPLACE INTO Member\n        (user_id, course_id) VALUES (?, ?)''',\n        (user_id, course_id))\n    \n    conn.commit()\n```\n:::\n\n\n## Assignment\n\nThis application will read roster data in JSON format, parse the file, and then produce an SQLite database that contains a User, Course, and Member table and populate the tables from the data file.\n\nYou can base your solution on this code: http://www.py4e.com/code3/roster/roster.py - this code is incomplete as you need to modify the program to store the role column in the Member table to complete the assignment.\n\nEach student gets their own file for the assignment. Download this file and save it as roster_data.json. Move the downloaded file into the same folder as your roster.py program.\n\nOnce you have made the necessary changes to the program and it has been run successfully reading the above JSON data, run the following SQL command\n\n```\nSELECT User.name,Course.title, Member.role FROM \n    User JOIN Member JOIN Course \n    ON User.id = Member.user_id AND Member.course_id = Course.id\n    ORDER BY User.name DESC, Course.title DESC, Member.role DESC LIMIT 2;\n```\n\nThe output should look as follows:\n\n```\nZohra|si334|0\nZenah|si430|0\n```\n\nOnce that query gives the correct data, run this query:\n\n```\nSELECT 'XYZZY' || hex(User.name || Course.title || Member.role ) AS X FROM \n    User JOIN Member JOIN Course \n    ON User.id = Member.user_id AND Member.course_id = Course.id\n    ORDER BY X LIMIT 1;\n```\n\nCode can be found in `code/roster_assignment.py`\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nimport json\nimport sqlite3\n\nconn = sqlite3.connect('roster_assignment_db.sqlite')\ncur = conn.cursor()\n\n#Setup\ncur.executescript('''\nDROP TABLE IF EXISTS User;\nDROP TABLE IF EXISTS Member;\nDROP TABLE IF EXISTS Course;\n\nCREATE TABLE User (\n    id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT UNIQUE,\n    name TEXT UNIQUE\n);\n\nCREATE TABLE Course (\n    id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT UNIQUE,\n    title TEXT UNIQUE\n);\n\nCREATE TABLE Member (\n    user_id INTEGER,\n    course_id INTEGER,\n    role INTEGER,\n    PRIMARY KEY (user_id, course_id)\n)\n''')\n\n#read in data with course info\nfname = '../data/roster_data.json'\nstr_data = open(fname).read()\njson_data = json.loads(str_data)\n\nfor entry in json_data:\n    name = entry[0]\n    title = entry[1]\n    role = entry[2]\n    print((name, title, role))\n\n    cur.execute('''INSERT OR IGNORE INTO User (name)\n        VALUES (?)''',(name,) )\n    cur.execute('SELECT id FROM User WHERE name = ?', (name,))\n    user_id = cur.fetchone()[0]\n\n    cur.execute('''INSERT OR IGNORE INTO Course (title)\n        VALUES (?)''',(title,) )\n    cur.execute('SELECT id FROM Course WHERE title = ?', (title,))\n    course_id = cur.fetchone()[0]\n\n    cur.execute('''INSERT OR REPLACE INTO Member\n        (user_id, course_id, role) VALUES (?, ?, ?)''',\n        (user_id, course_id, role))\n    \n    conn.commit()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n('Japjeet', 'si110', 1)\n('Shani', 'si110', 0)\n('Shuni', 'si110', 0)\n('Giancarlo', 'si110', 0)\n('Natalie', 'si110', 0)\n('Marwah', 'si110', 0)\n('Kristoffer', 'si110', 0)\n('Paolo', 'si110', 0)\n('Alastair', 'si110', 0)\n('Meah', 'si110', 0)\n('Torri', 'si110', 0)\n('Diarmid', 'si110', 0)\n('Elaf', 'si110', 0)\n('Ghyll', 'si110', 0)\n('Haydyn', 'si110', 0)\n('Tanay', 'si110', 0)\n('Oluwabukunmi', 'si110', 0)\n('Pamindar', 'si110', 0)\n('Asim', 'si110', 0)\n('Jennah', 'si110', 0)\n('Jayde', 'si110', 0)\n('Robbie', 'si110', 0)\n('Michal', 'si110', 0)\n('Seb', 'si110', 0)\n('Ceridwen', 'si110', 0)\n('Noor', 'si110', 0)\n('Bjorn', 'si110', 0)\n('Muhsin', 'si110', 0)\n('Erinn', 'si110', 0)\n('Pyper', 'si110', 0)\n('Cal', 'si110', 0)\n('Cilla', 'si106', 1)\n('Natan', 'si106', 0)\n('Jaiden', 'si106', 0)\n('Rheanna', 'si106', 0)\n('Laiba', 'si106', 0)\n('Ioanna', 'si106', 0)\n('Immanuel', 'si106', 0)\n('Bradley', 'si106', 0)\n('Kendyn', 'si106', 0)\n('Chibudom', 'si106', 0)\n('Alison', 'si106', 0)\n('Dion', 'si106', 0)\n('Iona', 'si106', 0)\n('Hately', 'si106', 0)\n('Erann', 'si106', 0)\n('Farhan', 'si106', 0)\n('Rob', 'si106', 0)\n('Sionan', 'si106', 0)\n('Sinali', 'si106', 0)\n('Robin', 'si106', 0)\n('Talorcan', 'si106', 0)\n('Lianne', 'si106', 0)\n('Rohit', 'si106', 0)\n('Denzel', 'si106', 0)\n('Fergal', 'si106', 0)\n('Brooklynn', 'si106', 0)\n('Tygan', 'si106', 0)\n('Verity', 'si106', 0)\n('Aonghus', 'si106', 0)\n('Camryn', 'si106', 0)\n('Adrienne', 'si106', 0)\n('Faizaan', 'si106', 0)\n('Sona', 'si106', 0)\n('Edison', 'si106', 0)\n('Harriette', 'si106', 0)\n('Benji', 'si106', 0)\n('Aliya', 'si106', 0)\n('Erinn', 'si106', 0)\n('Remy', 'si106', 0)\n('Jiayi', 'si106', 0)\n('Siergiej', 'si106', 0)\n('Lucian', 'si206', 1)\n('Aarez', 'si206', 0)\n('Ishwar', 'si206', 0)\n('Hadiyah', 'si206', 0)\n('Mercedes', 'si206', 0)\n('Sol', 'si206', 0)\n('Sweyn', 'si206', 0)\n('Avah', 'si206', 0)\n('Jarell', 'si206', 0)\n('Abeera', 'si206', 0)\n('Eisa', 'si206', 0)\n('Alexina', 'si206', 0)\n('Lewie', 'si206', 0)\n('Mackenzy', 'si206', 0)\n('Torrin', 'si206', 0)\n('Astrud', 'si206', 0)\n('Kole', 'si206', 0)\n('Tyrone', 'si206', 0)\n('Reynelle', 'si206', 0)\n('Zander', 'si206', 0)\n('Makenzie', 'si206', 0)\n('Prudance', 'si206', 0)\n('Aayma', 'si206', 0)\n('Franco', 'si206', 0)\n('Anisa', 'si206', 0)\n('Casey', 'si206', 0)\n('Gene', 'si206', 0)\n('Aedan', 'si206', 0)\n('Kaira', 'si206', 0)\n('Kalli', 'si206', 0)\n('Ikechukwu', 'si206', 0)\n('Jaime', 'si206', 0)\n('Madeeha', 'si206', 0)\n('Ria', 'si206', 0)\n('Marriam', 'si206', 0)\n('Hala', 'si206', 0)\n('Calli', 'si206', 0)\n('Rhuaridh', 'si206', 0)\n('Deegan', 'si206', 0)\n('Thiago', 'si206', 0)\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n('Chibudom', 'si206', 0)\n('Alice', 'si206', 0)\n('Stanislaw', 'si206', 0)\n('Darrell', 'si301', 1)\n('Shanae', 'si301', 0)\n('Kelsey', 'si301', 0)\n('Delilah', 'si301', 0)\n('Elisabeth', 'si301', 0)\n('Thea', 'si301', 0)\n('Erica', 'si301', 0)\n('Jayhan', 'si301', 0)\n('Ainsley', 'si301', 0)\n('Scarlet', 'si301', 0)\n('Caedyn', 'si301', 0)\n('Aimi', 'si301', 0)\n('Imogen', 'si301', 0)\n('Vladislav', 'si301', 0)\n('Viktoria', 'si301', 0)\n('Inez', 'si301', 0)\n('Motade', 'si301', 0)\n('Reiss', 'si301', 0)\n('Christopher', 'si301', 0)\n('Loghan', 'si301', 0)\n('Ailin', 'si301', 0)\n('Carolyn', 'si301', 0)\n('Kristin', 'si301', 0)\n('Pippa', 'si310', 1)\n('Robyn', 'si310', 0)\n('Pari', 'si310', 0)\n('Raimee', 'si310', 0)\n('Jorja', 'si310', 0)\n('Lekiesha', 'si310', 0)\n('Rosalyn', 'si310', 0)\n('Kacey', 'si310', 0)\n('Aqsa', 'si310', 0)\n('Roxanna', 'si310', 0)\n('Kurt', 'si310', 0)\n('Rhian', 'si310', 0)\n('Janey', 'si310', 0)\n('Shinay', 'si310', 0)\n('Jackie', 'si310', 0)\n('Oshun', 'si310', 0)\n('Martin', 'si310', 0)\n('Korben', 'si310', 0)\n('Riha', 'si310', 0)\n('Maximilian', 'si310', 0)\n('Carron', 'si310', 0)\n('Wanessa', 'si310', 0)\n('Akam', 'si310', 0)\n('Rosanna', 'si310', 0)\n('Jonathon', 'si310', 0)\n('Sadie', 'si310', 0)\n('Mariette', 'si310', 0)\n('Haydyn', 'si310', 0)\n('Mhairade', 'si310', 0)\n('Khaya', 'si310', 0)\n('Brodie', 'si310', 0)\n('Manon', 'si310', 0)\n('Chantelle', 'si310', 0)\n('Camryn', 'si310', 0)\n('Roba', 'si310', 0)\n('Calum', 'si310', 0)\n('Faryn', 'si310', 0)\n('Murron', 'si310', 0)\n('Cloe', 'si310', 0)\n('Conner', 'si310', 0)\n('Kames', 'si310', 0)\n('Oryn', 'si310', 0)\n('Rubhan', 'si310', 0)\n('Layah', 'si310', 0)\n('Xida', 'si310', 0)\n('Bobbi', 'si310', 0)\n('Kihanna', 'si310', 0)\n('Lenny', 'si310', 0)\n('Jared', 'si334', 1)\n('Denis', 'si334', 0)\n('Malebo', 'si334', 0)\n('Paula', 'si334', 0)\n('Shayne', 'si334', 0)\n('Tamar', 'si334', 0)\n('Sharleen', 'si334', 0)\n('Silvana', 'si334', 0)\n('Zohra', 'si334', 0)\n('Sheignneth', 'si334', 0)\n('Oluwafemi', 'si334', 0)\n('Jeemie', 'si334', 0)\n('Laranya', 'si334', 0)\n('Aydon', 'si334', 0)\n('Pamela', 'si334', 0)\n('Gwendolyn', 'si334', 0)\n('Susan', 'si334', 0)\n('Zeeshan', 'si334', 0)\n('Alycia', 'si334', 0)\n('Fearghus', 'si334', 0)\n('Keziah', 'si334', 0)\n('Magnus', 'si334', 0)\n('Leeona', 'si334', 0)\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n('Alasdair', 'si334', 0)\n('Konnor', 'si334', 0)\n('Connar', 'si334', 0)\n('Motade', 'si334', 0)\n('Wojciech', 'si334', 0)\n('Lennan', 'si334', 0)\n('Nirvana', 'si334', 0)\n('Breogan', 'si334', 0)\n('Kiegan', 'si334', 0)\n('Azaan', 'si334', 0)\n('Tea', 'si334', 0)\n('Caleb', 'si334', 0)\n('Karimas', 'si334', 0)\n('Caley', 'si334', 0)\n('Johndean', 'si334', 0)\n('Jane', 'si334', 0)\n('Allice', 'si334', 0)\n('Ryszard', 'si334', 0)\n('Jaydn', 'si334', 0)\n('Benny', 'si334', 0)\n('Morven', 'si363', 1)\n('Ellisa', 'si363', 0)\n('Shazina', 'si363', 0)\n('Hristomir', 'si363', 0)\n('Cheyanna', 'si363', 0)\n('Teagan', 'si363', 0)\n('Cassieleigh', 'si363', 0)\n('Prabhasees', 'si363', 0)\n('Areeb', 'si363', 0)\n('Daniels', 'si363', 0)\n('Rafal', 'si363', 0)\n('Stella', 'si363', 0)\n('Danys', 'si363', 0)\n('Hariot', 'si363', 0)\n('Anmar', 'si363', 0)\n('Eloise', 'si363', 0)\n('Juliet', 'si363', 0)\n('Dhani', 'si363', 0)\n('Anish', 'si363', 0)\n('Hajrah', 'si363', 0)\n('Abbigale', 'si363', 0)\n('Tiffany', 'si363', 0)\n('Forrest', 'si363', 0)\n('Shannyn', 'si363', 0)\n('Alfred', 'si363', 0)\n('Josephina', 'si363', 0)\n('Bryan', 'si363', 0)\n('Monta', 'si363', 0)\n('Alyth', 'si363', 0)\n('Luna', 'si363', 0)\n('Sandie', 'si363', 0)\n('Atiya', 'si364', 1)\n('Loki', 'si364', 0)\n('Ariah', 'si364', 0)\n('Aakriti', 'si364', 0)\n('Morgan', 'si364', 0)\n('Dafydd', 'si364', 0)\n('Nitya', 'si364', 0)\n('Chala', 'si364', 0)\n('Kadie', 'si364', 0)\n('Aristotelis', 'si364', 0)\n('Tammara', 'si364', 0)\n('Anousha', 'si364', 0)\n('Liesje', 'si364', 0)\n('Demileigh', 'si364', 0)\n('Casie', 'si364', 0)\n('Miriam', 'si364', 0)\n('Cohan', 'si364', 0)\n('Natan', 'si364', 0)\n('Saman', 'si364', 0)\n('Kitty', 'si364', 0)\n('Maksim', 'si364', 0)\n('Coel', 'si364', 0)\n('Marwad', 'si364', 0)\n('Bronte', 'si364', 0)\n('Coya', 'si364', 0)\n('Ivory', 'si364', 0)\n('Lula', 'si364', 0)\n('Indi', 'si364', 0)\n('Alexina', 'si364', 0)\n('Marcus', 'si364', 0)\n('Stefan', 'si364', 0)\n('Kaiden', 'si364', 0)\n('Geoff', 'si422', 1)\n('Marina', 'si422', 0)\n('Niah', 'si422', 0)\n('Yva', 'si422', 0)\n('Franciszek', 'si422', 0)\n('Campbel', 'si422', 0)\n('Syed', 'si422', 0)\n('Nitya', 'si422', 0)\n('Pyper', 'si422', 0)\n('Vanessa', 'si422', 0)\n('Makaila', 'si422', 0)\n('Stevie', 'si422', 0)\n('Mehraz', 'si422', 0)\n('Rayaan', 'si422', 0)\n('Malika', 'si422', 0)\n('Haris', 'si422', 0)\n('Holly', 'si422', 0)\n('Ellyce', 'si422', 0)\n('Se', 'si422', 0)\n('Jon', 'si422', 0)\n('Jomuel', 'si422', 0)\n('Dorian', 'si422', 0)\n('Muir', 'si422', 0)\n('Arisha', 'si422', 0)\n('Makenzie', 'si422', 0)\n('Sunny', 'si422', 0)\n('Juliana', 'si422', 0)\n('Munmair', 'si422', 0)\n('Jordan', 'si422', 0)\n('Remonae', 'si422', 0)\n('Martha', 'si422', 0)\n('Uchenna', 'si422', 0)\n('Kristen', 'si422', 0)\n('Jeevan', 'si422', 0)\n('Ashley', 'si422', 0)\n('Hamish', 'si422', 0)\n('Raunaq', 'si422', 0)\n('Abigail', 'si422', 0)\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n('Keiren', 'si422', 0)\n('Devlin', 'si422', 0)\n('Clarizze', 'si422', 0)\n('Amyleigh', 'si430', 1)\n('Madeeha', 'si430', 0)\n('Caitlyn', 'si430', 0)\n('Sydnee', 'si430', 0)\n('Benny', 'si430', 0)\n('Karol', 'si430', 0)\n('Micheal', 'si430', 0)\n('Mary', 'si430', 0)\n('Sadhbh', 'si430', 0)\n('Emilyjo', 'si430', 0)\n('Diarmaid', 'si430', 0)\n('Xida', 'si430', 0)\n('Celeste', 'si430', 0)\n('Audrey', 'si430', 0)\n('Thara', 'si430', 0)\n('Roan', 'si430', 0)\n('Lavinia', 'si430', 0)\n('Sharon', 'si430', 0)\n('Hallie', 'si430', 0)\n('Maimie', 'si430', 0)\n('Alishba', 'si430', 0)\n('Caydee', 'si430', 0)\n('Neela', 'si430', 0)\n('Allice', 'si430', 0)\n('Divinewill', 'si430', 0)\n('Deryn', 'si430', 0)\n('Kyral', 'si430', 0)\n('Leaya', 'si430', 0)\n('Kerrigan', 'si430', 0)\n('Mercy', 'si430', 0)\n('Ayat', 'si430', 0)\n('Zenah', 'si430', 0)\n```\n:::\n:::\n\n\n",
    "supporting": [
      "4_many_to_many_relationships_in_sql_files/figure-pdf"
    ],
    "filters": []
  }
}