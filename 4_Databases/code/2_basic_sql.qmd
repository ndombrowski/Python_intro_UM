# Basic SQL

## Terminology

- Database: contains many tables
- Relation or table: contains tuples and attributes
- Tuple or row: a set of fields that generally represents an "object", like a person or a music track
- Attribute also column or field: one of possibly many elements of data corresponding to the object represented by the row


## Relational databases

Relational databases model data by storing rows and columns in tables. The power of the relational database lies in its ability to effectively retrieve data from these tables and in particular where there are multiple tables and relationships between those tables involved in the query.  


## SQL

- Stands for "Structured Query Language", the language we use to issue commands to a database:
    - Create a table
    - Retrieve some data
    - Insert data
    - Update data
    - Delete data


## Roles in large projects

- **Application developer**: builds the logic for the application, the look and feel of the application, monitors the application for problems
- **Database administrator**: Monitors and adjusts the database as the programs runs in production
- Often both people participate in the building of the "data model"


## Database model

A database model or database schema is the structure or format of a database, described in a formal language supported by the database management system. In other words, a "database model" is the application of a data model when used in conjunction with a database management system.


## Common database systems

- There are three major Database Management Systems in wide use:
    - Oracle: Large, commercial, enterprise-scale, very tweakable
    - MySQL: Simpler but fast and scalable, and commercial open source
    - SqlServer: nice, from Microsoft
- Many smaller projects that are free and open source such as HSQL, SQLite, Postgress, ...

For this tutorial we work with SQLite downloaded from: `https://sqlitebrowser.org/dl/`.

We start it using the `DB Browser for SQLite`

- Start by saying: new database
- Save as sql1 in the projects data folder
- Now we can add data to this database. We only do this in the SQL browser, we don't use other tools for this

Lets start with creating a table by using the 'execute sql' tab and entering:

```
CREATE TABLE Users(
name VARCHAR(128),
email VARCHAR(128)
)
```

Here we create a table with the name user and we add two columns named name and email, each should only include characters with up to 128 characters. This is our contract, our schema.

By being very explicit about our data things become very fast.

After we hit the execute button, we get an added table in the DB schema.  

Next, lets add some data:

- Go to browse data, table users
- Click new record add 4 new rows 
- If we check the SQL log to see all commands that were run in the back


## SQL insert

The insert statement inserts a new row into the table. Above we used the interface to accomplish this but we also can use a SQL commands:

```
INSERT INTO Users (name, email) VALUES ('Kirstin', 'kf@umich.edu')
```


## SQL delete

Deletes a row in the table based on a selection criteria:

```
DELETE FROM Users WHERE email='fred@umich.edu'
```

With the WHERE we say: Only delete were XYZ is true.


## SQL update

Allows us to update a field with a where clause:

```
UPDATE Users SET name='Charles' WHERE email='csev@umich.edu'
```

Here, the where clause is important, otherwise we would update ALL the names.


## Retriving records: Select

The select statement retrieves a group of records: you can either retrieve all their records or a subset of records with a where clause:

```
SELECT * FROM Users
```

```
SELECT * FROM Users WHERE email='csev@umich.edu'
```


## Sorting with ORDER BY

You can add an order by clause to select statements to get the result sorted in ascending or descending order

```
SELECT * FROM Users ORDER BY email
```


## Worked Example: Counting Email in a Database

Code is in `code/count_sql.py`

```{python}
import sqlite3

#connect to db, it will create the file if it does not exist
conn = sqlite3.connect('../data/emaildb.sqlite')

#create a database handle
#i.e. we send commands to the cursor and get responses through that cursor
cur = conn.cursor()

#if table exist, delete so we have a fresh start
cur.execute('DROP TABLE IF EXISTS Counts')

#create a new table from fresh
cur.execute('CREATE TABLE counts (email TEXT, count INTEGER)')

fname='../data/mbox-short.txt'
fh = open(fname)

for line in fh:
    if not line.startswith('From: '): 
        continue
    pieces = line.split()
    
    #extract email addresses
    email = pieces[1]

    #prepare the cursor to receive data:
    #`=?` here, the ? is a placeholder to prevent sql injections
    #the placeholder ultimately will replaced it with a ONE tuple `(email,)`
    cur.execute('SELECT count FROM Counts WHERE email = ? ', (email,))
    
    #grep the first one and give it back in row
    row = cur.fetchone()

    #if the row is empty insert the mail and an inital count of 1
    #if the row exists, i.e. the mail is already in there, update the counter    
    if row is None:
        cur.execute('''INSERT INTO Counts (email, count) VALUES (?,1)''', (email,))
    else:
        cur.execute('UPDATE Counts SET count = count + 1 WHERE email = ?',(email,))
    
    #write the db to disk
    conn.commit()

#create string to extract data
sqlstr = 'SELECT email, count FROM Counts ORDER BY count DESC LIMIT 10'

#extract data
for row in cur.execute(sqlstr):
    print(str(row[0]), row[1])

print('')
```


## Exercise 1: Our First Database

Then, create a SQLITE database or use an existing database and create a table in the database called "Ages":

```
CREATE TABLE Ages ( 
  name VARCHAR(128), 
  age INTEGER
)
```

Then make sure the table is empty by deleting any rows that you previously inserted, and insert these rows and only these rows with the following commands:

```
DELETE FROM Ages;
INSERT INTO Ages (name, age) VALUES ('Philip', 21);
INSERT INTO Ages (name, age) VALUES ('Rydha', 18);
INSERT INTO Ages (name, age) VALUES ('Adana', 23);
INSERT INTO Ages (name, age) VALUES ('Oscar', 31);
INSERT INTO Ages (name, age) VALUES ('Kayda', 30);
INSERT INTO Ages (name, age) VALUES ('Makenna', 27);
```

Once the inserts are done, run the following SQL command:

```
SELECT hex(name || age) AS X FROM Ages ORDER BY X
```

## Exercise 2: Count email

This application will read the mailbox data (mbox.txt) and count the number of email messages per organization (i.e. domain name of the email address) using a database with the following schema to maintain the counts.

```
CREATE TABLE Counts (org TEXT, count INTEGER)
```

Code is in `code/sql_ex1.py`

```{python}
import sqlite3
import re

#connect to db, it will create the file if it does not exist
conn = sqlite3.connect('orga_info.sqlite')

#create a database handle
#i.e. we send commands to the cursor and get responses through that cursor
cur = conn.cursor()

#if table exist, delete so we have a fresh start
cur.execute('DROP TABLE IF EXISTS Counts')

#create a new table from fresh
cur.execute('CREATE TABLE counts (org TEXT, count INTEGER)')

fname='../data/mbox.txt'
fh = open(fname)

for line in fh:
    if not line.startswith('From: '): 
        continue

    #extract orga info
    email = line.split()[1]
    orga = email.split('@')[1]
    #print((orga))

    #prepare the cursor to receive data:
    #`=?` here, the ? is a placeholder to prevent sql injections
    #the placeholder ultimately will replaced it with a ONE tuple `(email,)`
    cur.execute('SELECT count FROM Counts WHERE org = ? ', (orga,))
    
    #grep the first one and give it back in row
    row = cur.fetchone()

    #if the row is empty insert the mail and an inital count of 1
    # if the row exists, i.e. the mail is already in there, update the counter    
    if row is None:
        cur.execute('''INSERT INTO Counts (org, count) VALUES (?,1)''', (orga,))
    else:
        cur.execute('UPDATE Counts SET count = count + 1 WHERE org = ?',(orga,))
   
    #write the db to disk
    conn.commit()

#create string to extract data
sqlstr = 'SELECT org, count FROM Counts ORDER BY count DESC'

#view data
##for row in cur.execute(sqlstr):
#    print(str(row[0]), row[1])

#count data 
num_list = list()

for row in cur.execute(sqlstr):
    num = int(row[1])
    num_list.append(num)

print(sum(num_list))
```








