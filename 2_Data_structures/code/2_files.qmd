# Files

For the following exercises, we uses a text file with some information from emails that was downloaded into the dat folder from [here](https://www.py4e.com/code/mbox-short.txt).


## Opening files

- Before we can read the contents of a file, we must tell Py which file we are going to work with and what we will be doing to the file
- This is done with the `open()` function
- `open()` returns a **file handle** - a variable used to perform operations on the file

```{python}
1+1
```

## Using open()

- The general structure is: **handle = open(filename, mode)**
- The file handle is not the data but a way to get at the data
- This returns a handle we can use to manipulate the file
- The filename is a string
- Mode is an optional argument and should be `r` if we are planning to read the file and `w` if we are going to write to the file 

```{python}
fhand = open('../data/mbox-short.txt', 'r')
print(fhand)
```

## What is a handle?

A handle is something that's sort of a porthole/connection between your program and this file that's sitting on the disk. We can:  
- open it
- read from it
- write to it
- close it when we are done


## The newline character

- We use a special character called the **newline** to indicate when the line ends
- We represent it as `\n` in strings
- Newline is still one character, not too
- A text file has newlines at the end of each line

```{python}
stuff = 'X\nY'
stuff
```

```{python}
print(stuff)
```


```{python}
len(stuff)
```


## File handle as a sequence

- A file handle open for read can be treated as a sequence of strings where each line in the file is a string in the sequence. A file handle can be seen as a sequence of lines that allow us to iterate through it automatically using the for loop
- We can use the for statement to iterate through a sequence
- Remember: A sequence is an ordered set

```{python}
#|eval: false
xfile = open('../data/mbox-short.txt', 'r')

for line in xfile:
    print(line)
```


## Counting lines in a file

```{python}
xfile = open('../data/mbox-short.txt', 'r')
count = 0

for line in xfile:
    count = count + 1

#print the nr of lines
print('Line count: ', count)
```


## Reading the whole file using `read()`

Beware: `read()` does not split our file into lines. The newlines are still there and print will show them but keep in mind, we have one long character string puncutated with new lines.

```{python}
xfile = open('../data/mbox-short.txt', 'r')
inp = xfile.read()

#count the nr of characters
print(len(inp))
```


## Searching through a file

```{python}
fhand = open('../data/mbox-short.txt', 'r')

for line in fhand:
    if line.startswith('From: s'):
        print(line)

print('')
```

What are all these blank lines doing here?

- Each line from the file has a new line at the end
- The print statement adds a newline to each line 
- So we turn up with two new lines per extracted string of characters

```{python}
fhand = open('../data/mbox-short.txt', 'r')

for line in fhand:
    line = line.rstrip()
    if line.startswith('From: s'):
        print(line)

print('')
```


## Skipping with continue

We can skip a line using the `continue` statement:

```{python}
fhand = open('../data/mbox-short.txt', 'r')

for line in fhand:
    line = line.rstrip()
    #if line doesn't start with pattern, skip it
    if not line.startswith('From: s'):
        continue
    print(line)

print('')
```


## Using `in` to select lines

We can look for a string anywhere in a line as our selection criteria:

```{python}
fhand = open('../data/mbox-short.txt', 'r')

for line in fhand:
    line = line.rstrip()
    if not 'd@uct.ac.za' in line:
        continue
    print(line)

print('')
```


## Using prompt to enter a file

```{python}
#|eval: false
fname = input('Enter a file name: ')
xfile = open(fname, 'r')
count = 0

for line in xfile:
    count = count + 1

#print the nr of lines
print('Line count: ', count)
```


## Dealing with bad file names

Running example is in `code/open_file.py`.

```{python}
#|eval: false
fname = input('Enter the file name: ')

try:
    fhand = open(fname)
except:
    print('File cannot be opened:', fname)
    quit()

count = 0

for line in fhand:
    count = count + 1

print('There are', count, 'subject lines in', fname)
```



## Exercise 7.1

Write a program that prompts for a file name, then opens that file and reads through the file, and print the contents of the file in upper case. Use the file words.txt to produce the output below.

Running example is in `code/open_file_ex7_1.py`.


```{python}
#|eval: false
fname = input('Enter the filename: ')

try:
    fname = open(fname)
except:
    print('This file does not exist: ', fname)
    quit()

for line in fname:
    line = line.rstrip().upper()
    print(line)
```



## Exercise 7.2

Write a program that prompts for a file name, then opens that file and reads through the file, looking for lines of the form:

X-DSPAM-Confidence:    0.8475

Count these lines and extract the floating point values from each of the lines and compute the average of those values and produce an output as shown below. Do not use the sum() function or a variable named sum in your solution.

You can download the sample data at http://www.py4e.com/code3/mbox-short.txt

Running example is in `code/open_file_ex7_2.py`.

```{python}
fname = '../data/mbox-short.txt'

try:
    fh = open(fname)
except:
    print('This file does not exist: ', fname)
    quit()

count = 0
total = 0 

for line in fh:
    line = line.rstrip()
    if not line.startswith('X-DSPAM-Confidence:'):
        continue
    #find our numbers
    spos = line.find(':')
    num_s = line[spos + 1 :].strip()
    num = float(num_s)
    # get the sum
    total = total + num
    #get the count
    count = count + 1
    
print('Average spam confidence:', total/count)
```

