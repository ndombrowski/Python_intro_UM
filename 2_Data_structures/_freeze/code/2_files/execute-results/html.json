{
  "hash": "1532a11df469a401a12d57e0879a3fce",
  "result": {
    "markdown": "# Files\n\nFor the following exercises, we uses a text file with some information from emails that was downloaded into the dat folder from [here](https://www.py4e.com/code/mbox-short.txt).\n\n\n## Opening files\n\n- Before we can read the contents of a file, we must tell Py which file we are going to work with and what we will be doing to the file\n- This is done with the `open()` function\n- `open()` returns a **file handle** - a variable used to perform operations on the file\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\n1+1\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n2\n```\n:::\n:::\n\n\n## Using open()\n\n- The general structure is: **handle = open(filename, mode)**\n- The file handle is not the data but a way to get at the data\n- This returns a handle we can use to manipulate the file\n- The filename is a string\n- Mode is an optional argument and should be `r` if we are planning to read the file and `w` if we are going to write to the file \n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nfhand = open('../data/mbox-short.txt', 'r')\nprint(fhand)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<_io.TextIOWrapper name='../data/mbox-short.txt' mode='r' encoding='UTF-8'>\n```\n:::\n:::\n\n\n## What is a handle?\n\nA handle is something that's sort of a porthole/connection between your program and this file that's sitting on the disk. We can:  \n- open it\n- read from it\n- write to it\n- close it when we are done\n\n\n## The newline character\n\n- We use a special character called the **newline** to indicate when the line ends\n- We represent it as `\\n` in strings\n- Newline is still one character, not too\n- A text file has newlines at the end of each line\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nstuff = 'X\\nY'\nstuff\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\n'X\\nY'\n```\n:::\n:::\n\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nprint(stuff)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nX\nY\n```\n:::\n:::\n\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\nlen(stuff)\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\n3\n```\n:::\n:::\n\n\n## File handle as a sequence\n\n- A file handle open for read can be treated as a sequence of strings where each line in the file is a string in the sequence. A file handle can be seen as a sequence of lines that allow us to iterate through it automatically using the for loop\n- We can use the for statement to iterate through a sequence\n- Remember: A sequence is an ordered set\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\nxfile = open('../data/mbox-short.txt', 'r')\n\nfor line in xfile:\n    print(line)\n```\n:::\n\n\n## Counting lines in a file\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\nxfile = open('../data/mbox-short.txt', 'r')\ncount = 0\n\nfor line in xfile:\n    count = count + 1\n\n#print the nr of lines\nprint('Line count: ', count)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nLine count:  1910\n```\n:::\n:::\n\n\n## Reading the whole file using `read()`\n\nBeware: `read()` does not split our file into lines. The newlines are still there and print will show them but keep in mind, we have one long character string puncutated with new lines.\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\nxfile = open('../data/mbox-short.txt', 'r')\ninp = xfile.read()\n\n#count the nr of characters\nprint(len(inp))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n94626\n```\n:::\n:::\n\n\n## Searching through a file\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\nfhand = open('../data/mbox-short.txt', 'r')\n\nfor line in fhand:\n    if line.startswith('From: s'):\n        print(line)\n\nprint('')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nFrom: stephen.marquard@uct.ac.za\n\nFrom: stephen.marquard@uct.ac.za\n\n\n```\n:::\n:::\n\n\nWhat are all these blank lines doing here?\n\n- Each line from the file has a new line at the end\n- The print statement adds a newline to each line \n- So we turn up with two new lines per extracted string of characters\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\nfhand = open('../data/mbox-short.txt', 'r')\n\nfor line in fhand:\n    line = line.rstrip()\n    if line.startswith('From: s'):\n        print(line)\n\nprint('')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nFrom: stephen.marquard@uct.ac.za\nFrom: stephen.marquard@uct.ac.za\n\n```\n:::\n:::\n\n\n## Skipping with continue\n\nWe can skip a line using the `continue` statement:\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\nfhand = open('../data/mbox-short.txt', 'r')\n\nfor line in fhand:\n    line = line.rstrip()\n    #if line doesn't start with pattern, skip it\n    if not line.startswith('From: s'):\n        continue\n    print(line)\n\nprint('')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nFrom: stephen.marquard@uct.ac.za\nFrom: stephen.marquard@uct.ac.za\n\n```\n:::\n:::\n\n\n## Using `in` to select lines\n\nWe can look for a string anywhere in a line as our selection criteria:\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\nfhand = open('../data/mbox-short.txt', 'r')\n\nfor line in fhand:\n    line = line.rstrip()\n    if not 'd@uct.ac.za' in line:\n        continue\n    print(line)\n\nprint('')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nFrom stephen.marquard@uct.ac.za Sat Jan  5 09:14:16 2008\nX-Authentication-Warning: nakamura.uits.iupui.edu: apache set sender to stephen.marquard@uct.ac.za using -f\nFrom: stephen.marquard@uct.ac.za\nAuthor: stephen.marquard@uct.ac.za\nFrom stephen.marquard@uct.ac.za Fri Jan  4 04:07:34 2008\nX-Authentication-Warning: nakamura.uits.iupui.edu: apache set sender to stephen.marquard@uct.ac.za using -f\nFrom: stephen.marquard@uct.ac.za\nAuthor: stephen.marquard@uct.ac.za\n\n```\n:::\n:::\n\n\n## Using prompt to enter a file\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\nfname = input('Enter a file name: ')\nxfile = open(fname, 'r')\ncount = 0\n\nfor line in xfile:\n    count = count + 1\n\n#print the nr of lines\nprint('Line count: ', count)\n```\n:::\n\n\n## Dealing with bad file names\n\nRunning example is in `code/open_file.py`.\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\nfname = input('Enter the file name: ')\n\ntry:\n    fhand = open(fname)\nexcept:\n    print('File cannot be opened:', fname)\n    quit()\n\ncount = 0\n\nfor line in fhand:\n    count = count + 1\n\nprint('There are', count, 'subject lines in', fname)\n```\n:::\n\n\n## Exercise 7.1\n\nWrite a program that prompts for a file name, then opens that file and reads through the file, and print the contents of the file in upper case. Use the file words.txt to produce the output below.\n\nRunning example is in `code/open_file_ex7_1.py`.\n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\nfname = input('Enter the filename: ')\n\ntry:\n    fname = open(fname)\nexcept:\n    print('This file does not exist: ', fname)\n    quit()\n\nfor line in fname:\n    line = line.rstrip().upper()\n    print(line)\n```\n:::\n\n\n## Exercise 7.2\n\nWrite a program that prompts for a file name, then opens that file and reads through the file, looking for lines of the form:\n\nX-DSPAM-Confidence:    0.8475\n\nCount these lines and extract the floating point values from each of the lines and compute the average of those values and produce an output as shown below. Do not use the sum() function or a variable named sum in your solution.\n\nYou can download the sample data at http://www.py4e.com/code3/mbox-short.txt\n\nRunning example is in `code/open_file_ex7_2.py`.\n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\nfname = '../data/mbox-short.txt'\n\ntry:\n    fh = open(fname)\nexcept:\n    print('This file does not exist: ', fname)\n    quit()\n\ncount = 0\ntotal = 0 \n\nfor line in fh:\n    line = line.rstrip()\n    if not line.startswith('X-DSPAM-Confidence:'):\n        continue\n    #find our numbers\n    spos = line.find(':')\n    num_s = line[spos + 1 :].strip()\n    num = float(num_s)\n    # get the sum\n    total = total + num\n    #get the count\n    count = count + 1\n    \nprint('Average spam confidence:', total/count)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAverage spam confidence: 0.7507185185185187\n```\n:::\n:::\n\n\n",
    "supporting": [
      "2_files_files/figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}