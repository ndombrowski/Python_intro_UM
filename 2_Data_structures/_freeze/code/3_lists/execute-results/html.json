{
  "hash": "bebacd1ff61a5da62f0b6c76893ff292",
  "result": {
    "markdown": "# Lists\n\n## Definitions:\n\n- **Algorithms**: A set of rules or steps used to solve a problem\n- **Data structures**: A particular way of organizing data in a computer\n\n## What is not a collection?\n\nMost of our variables have one value in them: when we put a new value in the variable the old value is overwritten.\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nx = 2\nx = 4\nprint(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n4\n```\n:::\n:::\n\n\n## What is a list?\n\n- A list is a kind of collection\n- A collection allows us to put many values in a single \"variable\"\n- A collection is useful since we can carry many values around in a convenient package\n- Example how a list looks: `friends = ['Joseph', 'Glenn', 'Sally']`. Here, *friends* is a list of strings\n- List constants are surrounded by square brackets, which are what is called a **bracket constant**\n- The elements in a list are separated by commas\n- A list element can be any Py object, even another list\n- A list can be empty\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nprint([1,24,27])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1, 24, 27]\n```\n:::\n:::\n\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nprint([1,'red',27])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1, 'red', 27]\n```\n:::\n:::\n\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\n#a list within a list\n#here we have a total of 3 elements\nprint([1,[24, 44],27])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1, [24, 44], 27]\n```\n:::\n:::\n\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\nprint([])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[]\n```\n:::\n:::\n\n\n## Lists an definite loops\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\nfriends = ['Joseph', 'Glenn', 'Sally']\n\nfor friend in friends:\n    print('Happy new year:', friend)\n\nprint(\"\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHappy new year: Joseph\nHappy new year: Glenn\nHappy new year: Sally\n\n```\n:::\n:::\n\n\n## Looking inside lists\n\nJust like strings, we can get any single element in a list using an index specified in square brackets:\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\nfriends = ['Joseph', 'Glenn', 'Sally']\n\nprint(friends[1])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nGlenn\n```\n:::\n:::\n\n\n## Lists are mutable\n\n- Strings are immutable, we cannot change the contents of a string, we must make a new string to make any change\n- Lists are mutable, we can change an element of a list using an index operator\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\n# This code will give an error:\n# The error is sth like object does not support item assignment\nfruit = 'banana'\nfruit[0] = 'b'\n```\n:::\n\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\nfriends = ['Joseph', 'Glenn', 'Sally']\nfriends[1] = 'Toto'\nprint(friends)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['Joseph', 'Toto', 'Sally']\n```\n:::\n:::\n\n\n## How long is a list\n\n- The `len()` function takes a list as a parameter and returns the number of elements in a list\n- Actually, `len()` tells us the number of elements of any set or sequence\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\nx = [1, 2, 'joe', 99]\nlen(x)\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```\n4\n```\n:::\n:::\n\n\n## Using the range function\n\n- The range function returns a list of numbers that range from 0 to one less than the parameter\n- We can construct an index loop using for and and integer iteratior\n- In Python 3 range() returns an \"immutable sequence type\" instead of a list object (Python 2).\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\nprint(range(4))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nrange(0, 4)\n```\n:::\n:::\n\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\nprint(list(range(4)))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[0, 1, 2, 3]\n```\n:::\n:::\n\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\nprint(list(range(len(friends))))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[0, 1, 2]\n```\n:::\n:::\n\n\n## Using range in a for loop to create a counted loop\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\nfriends = ['Joseph', 'Glenn', 'Sally']\n\nfor i in range(len(friends)):\n    friend = friends[i]\n    print('Happy New year:', friend)\n\nprint('')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHappy New year: Joseph\nHappy New year: Glenn\nHappy New year: Sally\n\n```\n:::\n:::\n\n\n## Concatenating lists\n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\na = [1,2,3]\nb = [4,5,6]\n\na + b\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```\n[1, 2, 3, 4, 5, 6]\n```\n:::\n:::\n\n\n## Slicing lists\n\nSlicing works the same as for strings:\n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\nt = [9, 41, 23, 3, 74, 15]\nprint(t[1:3])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[41, 23]\n```\n:::\n:::\n\n\n## Printing List methods\n\n::: {.cell execution_count=17}\n``` {.python .cell-code}\nx = list()\ntype(x)\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n```\nlist\n```\n:::\n:::\n\n\n::: {.cell execution_count=18}\n``` {.python .cell-code}\ndir(x)\n```\n\n::: {.cell-output .cell-output-display execution_count=17}\n```\n['__add__',\n '__class__',\n '__contains__',\n '__delattr__',\n '__delitem__',\n '__dir__',\n '__doc__',\n '__eq__',\n '__format__',\n '__ge__',\n '__getattribute__',\n '__getitem__',\n '__gt__',\n '__hash__',\n '__iadd__',\n '__imul__',\n '__init__',\n '__init_subclass__',\n '__iter__',\n '__le__',\n '__len__',\n '__lt__',\n '__mul__',\n '__ne__',\n '__new__',\n '__reduce__',\n '__reduce_ex__',\n '__repr__',\n '__reversed__',\n '__rmul__',\n '__setattr__',\n '__setitem__',\n '__sizeof__',\n '__str__',\n '__subclasshook__',\n 'append',\n 'clear',\n 'copy',\n 'count',\n 'extend',\n 'index',\n 'insert',\n 'pop',\n 'remove',\n 'reverse',\n 'sort']\n```\n:::\n:::\n\n\n## Building a list\n\n- We can create an empty list and then add elements using the **append** method\n- The list stays in order and new elements are added at the end of the list\n\n::: {.cell execution_count=19}\n``` {.python .cell-code}\nstuff = list()\nstuff.append('book')\nstuff.append(99)\nprint(stuff)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['book', 99]\n```\n:::\n:::\n\n\n## Is something in a list?\n\n- Python provides two operators that let you check if an item is in a list\n- These are logical operators that return True or False\n- They do not modify the list\n\n::: {.cell execution_count=20}\n``` {.python .cell-code}\nstuff = [1, 9, 21, 10, 16]\n\n9 in stuff\n```\n\n::: {.cell-output .cell-output-display execution_count=19}\n```\nTrue\n```\n:::\n:::\n\n\n::: {.cell execution_count=21}\n``` {.python .cell-code}\n15 in stuff\n```\n\n::: {.cell-output .cell-output-display execution_count=20}\n```\nFalse\n```\n:::\n:::\n\n\n::: {.cell execution_count=22}\n``` {.python .cell-code}\n20 not in stuff\n```\n\n::: {.cell-output .cell-output-display execution_count=21}\n```\nTrue\n```\n:::\n:::\n\n\n## Lists are in order and can be sorted\n\n- A list can hold many items and keeps those items in the order until we do sth to change the order\n- A list can be sorted to change its order\n- The sort method (unlike in strings) means \"sort yourself\"\n\n::: {.cell execution_count=23}\n``` {.python .cell-code}\nfriends = ['Joseph', 'Glenn', 'Sally']\n\nfriends.sort()\n\nprint(friends)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['Glenn', 'Joseph', 'Sally']\n```\n:::\n:::\n\n\n ## Build-in functions and lists\n \n - There are a number of functions that take lists as parameters\n\n::: {.cell execution_count=24}\n``` {.python .cell-code}\nnums = [3, 41, 23, 9, 74, 15]\n\nprint(len(nums))\nprint(max(nums))\nprint(min(nums))\nprint(sum(nums))\nprint(sum(nums)/len(nums))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n6\n74\n3\n165\n27.5\n```\n:::\n:::\n\n\nAn example where this is useful, the code is in `code/calc_average.py`.\n\n::: {.cell execution_count=25}\n``` {.python .cell-code}\nnumlist = list()\n\nwhile True:\n    inp = input('Enter a number: ')\n    if inp == 'done' :\n        break\n    \n    #convert our input to a float\n    try:\n        value = float(inp)\n    except: \n        print('Please, enter a number or done')\n        continue\n    \n    #add the value to our list\n    numlist.append(value)\n    \n#do math\naverage = sum(numlist) / len(numlist)\nprint('Average:', average)\n```\n:::\n\n\nThe difference compared to how we before constructed the calculations is in how much data is stored. In the example above, each number is stored in memory, while if we use `total = total + value` and `count = count +1` then only one number is stored.\n\nThis only makes a difference with very large amounts of data though.\n\n\n## Splitting strings\n\nSplit breaks a string into parts and produces a list of strings.  \nWe think of these as words.  \nWe can access a particular word or loop through all the words.\n\n::: {.cell execution_count=26}\n``` {.python .cell-code}\nabc = 'With three words'\n\n#take a string and turn it into a list \n#each element is one word in the string\nstuff = abc.split()\nprint(stuff)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['With', 'three', 'words']\n```\n:::\n:::\n\n\n::: {.cell execution_count=27}\n``` {.python .cell-code}\nlen(stuff)\n```\n\n::: {.cell-output .cell-output-display execution_count=25}\n```\n3\n```\n:::\n:::\n\n\n::: {.cell execution_count=28}\n``` {.python .cell-code}\nfor w in stuff:\n    print(w)\n\nprint('')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nWith\nthree\nwords\n\n```\n:::\n:::\n\n\n- Split by default splits by white space\n- When you do not specify a delimiter, multiple spaces are treated like one delimiter\n- You can specify the delimiter character to use\n\n::: {.cell execution_count=29}\n``` {.python .cell-code}\nline = 'A lot          of spaces'\netc = line.split()\nprint(etc)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['A', 'lot', 'of', 'spaces']\n```\n:::\n:::\n\n\n::: {.cell execution_count=30}\n``` {.python .cell-code}\nline = 'first;second;third'\nthing = line.split()\nprint(thing)\nprint(len(thing))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['first;second;third']\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n\n1\n```\n:::\n:::\n\n\n::: {.cell execution_count=31}\n``` {.python .cell-code}\nline = 'first;second;third'\nthing = line.split(';')\nprint(thing)\nprint(len(thing))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['first', 'second', 'third']\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n\n3\n```\n:::\n:::\n\n\nA working example to extract the day of the week in an email info file can be found in `code/split.py`.\n\nAn example for the text we are looking at:\n\n`From stephen.marquard@uct.ac.za Sat Jan  5 09:14:16 2008`\n\n::: {.cell execution_count=32}\n``` {.python .cell-code}\nfhand = open('../data/mbox-short.txt')\n\nfor line in fhand:\n    line = line.rstrip()\n    if not line.startswith('From s'):\n        continue\n    words = line.split()\n    print(words[2])\n\nprint('')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSat\nFri\n\n```\n:::\n:::\n\n\nAlternative:\n\nThe alternative needs a guardian, because we have blank lines which will result in a problem\n\n::: {.cell execution_count=33}\n``` {.python .cell-code}\nfhand = open('../data/mbox-short.txt')\n\nfor line in fhand:\n    line = line.rstrip()\n    #print(line)\n\nprint('')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n```\n:::\n:::\n\n\n::: {.cell execution_count=34}\n``` {.python .cell-code}\nfhand = open('../data/mbox-short.txt')\n\nfor line in fhand:\n    line = line.rstrip()\n    wds = line.split()\n    \n    #safe guard\n    if len(wds) < 1:\n        continue\n    \n    #ignore all statements not starting with From\n    #this will give an issue with empty lines and needs a safe guard\n    if wds[0] != 'From':\n        continue\n    \n    print(wds[1])\n\nprint('')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nstephen.marquard@uct.ac.za\nlouis@media.berkeley.edu\nzqian@umich.edu\nrjlowe@iupui.edu\nzqian@umich.edu\nrjlowe@iupui.edu\ncwen@iupui.edu\ncwen@iupui.edu\ngsilver@umich.edu\ngsilver@umich.edu\nzqian@umich.edu\ngsilver@umich.edu\nwagnermr@iupui.edu\nzqian@umich.edu\nantranig@caret.cam.ac.uk\ngopal.ramasammycook@gmail.com\ndavid.horwitz@uct.ac.za\ndavid.horwitz@uct.ac.za\ndavid.horwitz@uct.ac.za\ndavid.horwitz@uct.ac.za\nstephen.marquard@uct.ac.za\nlouis@media.berkeley.edu\nlouis@media.berkeley.edu\nray@media.berkeley.edu\ncwen@iupui.edu\ncwen@iupui.edu\ncwen@iupui.edu\n\n```\n:::\n:::\n\n\nAlternative with an or statement:\n\n::: {.cell execution_count=35}\n``` {.python .cell-code}\nfhand = open('../data/mbox-short.txt')\n\nfor line in fhand:\n    line = line.rstrip()\n    wds = line.split()\n    \n    #guardian in a compound statement\n    #if there are less than 1 word on the line OR if the first word is not FROM continue\n    #this works in order and would fail if we flip it\n    if len(wds) < 1 or wds[0] != 'From':\n        continue\n    \n    print(wds[1])\n\nprint('')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nstephen.marquard@uct.ac.za\nlouis@media.berkeley.edu\nzqian@umich.edu\nrjlowe@iupui.edu\nzqian@umich.edu\nrjlowe@iupui.edu\ncwen@iupui.edu\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\ncwen@iupui.edu\ngsilver@umich.edu\ngsilver@umich.edu\nzqian@umich.edu\ngsilver@umich.edu\nwagnermr@iupui.edu\nzqian@umich.edu\nantranig@caret.cam.ac.uk\ngopal.ramasammycook@gmail.com\ndavid.horwitz@uct.ac.za\ndavid.horwitz@uct.ac.za\ndavid.horwitz@uct.ac.za\ndavid.horwitz@uct.ac.za\nstephen.marquard@uct.ac.za\nlouis@media.berkeley.edu\nlouis@media.berkeley.edu\nray@media.berkeley.edu\ncwen@iupui.edu\ncwen@iupui.edu\ncwen@iupui.edu\n\n```\n:::\n:::\n\n\n## The double split pattern\n\nSometimes we split a line one way and then grap one of the pieces of the line and split it again.  \nI.e. lets imagine we want to extract the email host:  \nThe code can be found in `code/split_host.py`\n\n::: {.cell execution_count=36}\n``` {.python .cell-code}\nfhand = open('../data/mbox-short.txt')\n\nfor line in fhand:\n    line = line.rstrip()\n    if not line.startswith('From s'):\n        continue\n    words = line.split()\n    email = words[1]\n    pieces = email.split('@')\n    host = pieces[1]\n    print(host)\n\nprint('')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nuct.ac.za\nuct.ac.za\n\n```\n:::\n:::\n\n\n## Assignment 8.4\n\nOpen the file romeo.txt and read it line by line. \n\nFor each line, split the line into a list of words using the split() method.  \nThe program should build a list of words.  \nFor each word on each line check to see if the word is already in the list and if not append it to the list. When the program completes, sort and print the resulting words in python sort() order as shown in the desired output.\n\nYou can download the sample data at http://www.py4e.com/code3/romeo.txt and the code can be found in `code/assignment_8_4.py`\n\n::: {.cell execution_count=37}\n``` {.python .cell-code}\nfname = '../data/romeo.txt'\n\nfh = open(fname)\nlst = list()\n\nfor line in fh:\n    line = line.rstrip()\n    words = line.split()\n    for element in words:\n        if element not in lst:\n            lst.append(element)\n    \nlst.sort()\nprint(lst)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['Arise', 'But', 'It', 'Juliet', 'Who', 'already', 'and', 'breaks', 'east', 'envious', 'fair', 'grief', 'is', 'kill', 'light', 'moon', 'pale', 'sick', 'soft', 'sun', 'the', 'through', 'what', 'window', 'with', 'yonder']\n```\n:::\n:::\n\n\n## Assignment 8.5\n\nOpen the file mbox-short.txt and read it line by line. When you find a line that starts with 'From ' like the following line:\n \n`From stephen.marquard@uct.ac.za Sat Jan  5 09:14:16 2008`\n\nYou will parse the From line using split() and print out the second word in the line (i.e. the entire address of the person who sent the message). Then print out a count at the end.\n\nHint: make sure not to include the lines that start with 'From:'. Also look at the last line of the sample output to see how to print the count.\n\nThe code can be found in `code/assignment_8_5.py`\n\n::: {.cell execution_count=38}\n``` {.python .cell-code}\nfname = '../data/mbox-short.txt'\nfh = open(fname) \n\ncount = 0\n\nfor line in fh:\n    line = line.rstrip()\n    if not line.startswith('From '):\n        continue\n    mail = line.split()[1]\n    count = count + 1\n    \n    print(mail)\n\nprint(\"There were\", count, \"lines in the file with From as the first word\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nstephen.marquard@uct.ac.za\nlouis@media.berkeley.edu\nzqian@umich.edu\nrjlowe@iupui.edu\nzqian@umich.edu\nrjlowe@iupui.edu\ncwen@iupui.edu\ncwen@iupui.edu\ngsilver@umich.edu\ngsilver@umich.edu\nzqian@umich.edu\ngsilver@umich.edu\nwagnermr@iupui.edu\nzqian@umich.edu\nantranig@caret.cam.ac.uk\ngopal.ramasammycook@gmail.com\ndavid.horwitz@uct.ac.za\ndavid.horwitz@uct.ac.za\ndavid.horwitz@uct.ac.za\ndavid.horwitz@uct.ac.za\nstephen.marquard@uct.ac.za\nlouis@media.berkeley.edu\nlouis@media.berkeley.edu\nray@media.berkeley.edu\ncwen@iupui.edu\ncwen@iupui.edu\ncwen@iupui.edu\nThere were 27 lines in the file with From as the first word\n```\n:::\n:::\n\n\n",
    "supporting": [
      "3_lists_files/figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}