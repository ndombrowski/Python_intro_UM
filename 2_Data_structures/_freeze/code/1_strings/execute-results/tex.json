{
  "hash": "1cdd768da879b7062d00ce560fb566f5",
  "result": {
    "markdown": "# Strings\n\n## Definition\n\n- A string is a data type in python\n- A string is a sequence of characters, i.e. Hello\n- A string literal uses single or double quotes\n- For strings `+` means concatenate\n- When a string contains numbers, it is a string\n- We can convert numbers into a string using `int()`\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nstr1 = 'Hello'\nstr2 = \"you\"\n\n#concatenate strings\nconcat = str1 + str2\nprint(concat)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHelloyou\n```\n:::\n:::\n\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nstr3 = '123'\n\n#convert to number and do some math\nint(123) + 100\n```\n\n::: {.cell-output .cell-output-display execution_count=41}\n```\n223\n```\n:::\n:::\n\n\n## Reading an converting\n\n- We prefer to read data in using strings and then parse and convert data as we need\n- This gives us more control over error situations and/or bad user input\n- The input function always gives us back a string\n- Input numbers must be converted from strings\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nnum = input('Enter number: ')\nx = int(num) - 10\nprint(x)\n```\n:::\n\n\n## Looking inside a string\n\n- We can get at any single character in a string using an **index operator** specified in square brackets\n- The index value must be an integer and starts at 0\n- This index value can be an expression that is computed\n- You will get a python error if you attempt to index beyond the end of a string, i.e. `fruit[10]` that tells you that the string index is out of range\n\nbanana\n012345\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nfruit = 'banana'\nletter = fruit[1]\nprint(letter)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\na\n```\n:::\n:::\n\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\nx = 3\nw = fruit[x-1]\nprint(w)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nn\n```\n:::\n:::\n\n\n## Strings have a length\n\n- The build in function `len` gives us the length of a string\n- A function is some stored code that we use. A function takes some input and produces and output\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\nfruit = 'banana'\nprint(len(fruit))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n6\n```\n:::\n:::\n\n\n## Looping through strings\n\nUsing a while statement and an iteration variable, and the len function, we can construct a loop to look at each of the letters in a string individually:\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\nfruit = 'banana'\nindex = 0\n\nwhile index < len(fruit):\n    letter = fruit[index]\n    print(index, letter)\n    index = index + 1\n\nprint('')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n0 b\n1 a\n2 n\n3 a\n4 n\n5 a\n\n```\n:::\n:::\n\n\n- A definite loop using a for statement is a more elegant solution\n- The iteration variable is completely taken care of by the for loop\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\nfruit = 'banana'\n\nfor letter in fruit:\n    print(letter)\n\nprint('')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nb\na\nn\na\nn\na\n\n```\n:::\n:::\n\n\n## Looping and counting\n\nBelow is a simple loop that loops through each letter in a string and counts the number of times the loop encounters an *a* character\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\nword = 'banana'\ncount = 0\n\nfor letter in word:\n    if letter == 'a':\n        count = count + 1\n\nprint(count)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n3\n```\n:::\n:::\n\n\n## Slicing strings\n\n- We can also look at any continuous section of a string using a colon separator\n- The second number is one beyond the end of the slice, i.e. up to but not including\n- If the second number is beyond the end of the string it stops at the end\n\nMonty Python\n01234567891011\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\ns = 'Monty Python'\nprint(s[0:4])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nMont\n```\n:::\n:::\n\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\nprint(s[6:7])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nP\n```\n:::\n:::\n\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\nprint(s[6:20])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nPython\n```\n:::\n:::\n\n\nIf we leave off the first number or the last number of the slice, it is assumed to be the beginning or the end of the string, respectively:\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\nprint(s[:2])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nMo\n```\n:::\n:::\n\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\nprint(s[8:])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nthon\n```\n:::\n:::\n\n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\nprint(s[:])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nMonty Python\n```\n:::\n:::\n\n\n## Using `in` as logical operator\n\n- The keyword `in` can also be used to check to see if one string is in another string\n- The in expression is a logical expression that returns True or False and can be used in an if statement \n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\nfruit = 'banana'\n'n' in fruit\n```\n\n::: {.cell-output .cell-output-display execution_count=54}\n```\nTrue\n```\n:::\n:::\n\n\n::: {.cell execution_count=17}\n``` {.python .cell-code}\nfruit = 'banana'\n'm' in fruit\n```\n\n::: {.cell-output .cell-output-display execution_count=55}\n```\nFalse\n```\n:::\n:::\n\n\n::: {.cell execution_count=18}\n``` {.python .cell-code}\nfruit = 'banana'\n'nan' in fruit\n```\n\n::: {.cell-output .cell-output-display execution_count=56}\n```\nTrue\n```\n:::\n:::\n\n\n::: {.cell execution_count=19}\n``` {.python .cell-code}\nif 'a' in fruit:\n    print('Found it')\nprint('')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nFound it\n\n```\n:::\n:::\n\n\n## String comparisons\n\n::: {.cell execution_count=20}\n``` {.python .cell-code}\nif word == 'banana':\n    print('All right, bananas')\nprint('')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAll right, bananas\n\n```\n:::\n:::\n\n\nLess than and greater than have to do with the character set of your computer and the character set that Python is configured to use.\n\nI.e. uppercase Z is less than lower case a.\n\n::: {.cell execution_count=21}\n``` {.python .cell-code}\nword = 'a'\n\nif word < 'banana':\n    print('Your word ' + word + ', comes before banana')\nelif word > 'banana':\n    print('Your word' + word + ', comes after banana')\nelse:\n    print('All right, bananas')\n\nprint('')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nYour word a, comes before banana\n\n```\n:::\n:::\n\n\n## String library\n\n- Python has a number of string functions which are in the string library\n- These functions are already build into every string - we invoke them by appending the function to the string variable\n- These functions do not modify the original string, instead the return a new string that has been altered\n- We can also use string functions on constants\n- In the example below, `lower()` is what is called a method\n\n::: {.cell execution_count=22}\n``` {.python .cell-code}\ngreet = 'Hello Bob'\n\nzap = greet.lower()\nprint(zap)\nprint(greet)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nhello bob\nHello Bob\n```\n:::\n:::\n\n\n::: {.cell execution_count=23}\n``` {.python .cell-code}\nprint('Hi there'.lower())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nhi there\n```\n:::\n:::\n\n\n::: {.cell execution_count=24}\n``` {.python .cell-code}\nstuff = 'Hello world'\n\n#ask what type we have\ntype(stuff)\n```\n\n::: {.cell-output .cell-output-display execution_count=62}\n```\nstr\n```\n:::\n:::\n\n\n::: {.cell execution_count=25}\n``` {.python .cell-code}\n#what can strings do, print methods in the class str?\ndir(stuff)\n```\n\n::: {.cell-output .cell-output-display execution_count=63}\n```\n['__add__',\n '__class__',\n '__contains__',\n '__delattr__',\n '__dir__',\n '__doc__',\n '__eq__',\n '__format__',\n '__ge__',\n '__getattribute__',\n '__getitem__',\n '__getnewargs__',\n '__gt__',\n '__hash__',\n '__init__',\n '__init_subclass__',\n '__iter__',\n '__le__',\n '__len__',\n '__lt__',\n '__mod__',\n '__mul__',\n '__ne__',\n '__new__',\n '__reduce__',\n '__reduce_ex__',\n '__repr__',\n '__rmod__',\n '__rmul__',\n '__setattr__',\n '__sizeof__',\n '__str__',\n '__subclasshook__',\n 'capitalize',\n 'casefold',\n 'center',\n 'count',\n 'encode',\n 'endswith',\n 'expandtabs',\n 'find',\n 'format',\n 'format_map',\n 'index',\n 'isalnum',\n 'isalpha',\n 'isascii',\n 'isdecimal',\n 'isdigit',\n 'isidentifier',\n 'islower',\n 'isnumeric',\n 'isprintable',\n 'isspace',\n 'istitle',\n 'isupper',\n 'join',\n 'ljust',\n 'lower',\n 'lstrip',\n 'maketrans',\n 'partition',\n 'replace',\n 'rfind',\n 'rindex',\n 'rjust',\n 'rpartition',\n 'rsplit',\n 'rstrip',\n 'split',\n 'splitlines',\n 'startswith',\n 'strip',\n 'swapcase',\n 'title',\n 'translate',\n 'upper',\n 'zfill']\n```\n:::\n:::\n\n\nAn explanation on what all these methods do can be found [here](https://docs.python.org/3/library/stdtypes.html#string-methods).\n\n\n## Searching a string\n\n- We use the `find()` function to search for a substring within another string\n- `find()` returns the first occurrence of the substring\n- If the substring is not found, `find()` returns -1\n- Remember that a string position starts at zero\n  \nbanana\n012345\n\n::: {.cell execution_count=26}\n``` {.python .cell-code}\nfruit = 'banana'\n\npos = fruit.find('na')\nprint(pos)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n2\n```\n:::\n:::\n\n\n::: {.cell execution_count=27}\n``` {.python .cell-code}\naa = fruit.find('z')\nprint(aa)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n-1\n```\n:::\n:::\n\n\n## Making everything upper or lower case\n\n- You can make a copy of a string in lower or upper case\n- Often when we are searching for a string using `find()` we first convert the string to lower case so we can search the string regardless of the case\n\n::: {.cell execution_count=28}\n``` {.python .cell-code}\ngreet = 'Hello Bob'\n\nnnn = greet.upper()\nprint(nnn)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHELLO BOB\n```\n:::\n:::\n\n\n::: {.cell execution_count=29}\n``` {.python .cell-code}\nwww = greet.lower()\nprint(www)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nhello bob\n```\n:::\n:::\n\n\n## Search and replace\n\n- The `replace()` function is like a *search and replace* operation in a word processor\n- It replaces ALL occurrences of the search string with the replacement string\n\n::: {.cell execution_count=30}\n``` {.python .cell-code}\ngreet = 'Hello Bob'\n\nnstr = greet.replace('Bob', 'Jane')\nprint(nstr)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHello Jane\n```\n:::\n:::\n\n\n::: {.cell execution_count=31}\n``` {.python .cell-code}\nnstr = greet.replace('o', 'X')\nprint(nstr)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHellX BXb\n```\n:::\n:::\n\n\n## Stripping whitespace\n\n- Sometimes we want to take a string and remove whitespace at the beginning and/or the end\n- `lstrip()` and `rstrip()` remove whitespace to the left and right\n- `strip()` removes both beginning and ending whitespace\n\n::: {.cell execution_count=32}\n``` {.python .cell-code}\ngreet = '   Hello Bob '\ngreet.lstrip()\n```\n\n::: {.cell-output .cell-output-display execution_count=70}\n```\n'Hello Bob '\n```\n:::\n:::\n\n\n::: {.cell execution_count=33}\n``` {.python .cell-code}\ngreet.rstrip()\n```\n\n::: {.cell-output .cell-output-display execution_count=71}\n```\n'   Hello Bob'\n```\n:::\n:::\n\n\n::: {.cell execution_count=34}\n``` {.python .cell-code}\ngreet.strip()\n```\n\n::: {.cell-output .cell-output-display execution_count=72}\n```\n'Hello Bob'\n```\n:::\n:::\n\n\n## Prefixes\n\n::: {.cell execution_count=35}\n``` {.python .cell-code}\nline = 'Please have a nice day'\nline.startswith('Please')\n```\n\n::: {.cell-output .cell-output-display execution_count=73}\n```\nTrue\n```\n:::\n:::\n\n\n::: {.cell execution_count=36}\n``` {.python .cell-code}\nline.startswith('p')\n```\n\n::: {.cell-output .cell-output-display execution_count=74}\n```\nFalse\n```\n:::\n:::\n\n\n## Parsing and extracting\n\nWe want to extract the host information from an email header using methods in the string library:\n\n::: {.cell execution_count=37}\n``` {.python .cell-code}\ndata = 'From stephen.marquard@uct.ac.za Sat Jan  Jan  5 09:14:16 2008'\natpos = data.find('@')\nprint(atpos)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n21\n```\n:::\n:::\n\n\n::: {.cell execution_count=38}\n``` {.python .cell-code}\n#by adding a 2nd parameter in the find method we can say were we want to start\nsppos = data.find(' ', atpos)\nprint(sppos)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n31\n```\n:::\n:::\n\n\n::: {.cell execution_count=39}\n``` {.python .cell-code}\n#use the boundaries we identified above to extract the host\nhost = data[atpos+1 : sppos]\nprint(host)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nuct.ac.za\n```\n:::\n:::\n\n\n## Strings in Py2\n\n- One of the real advantages of Python 3 is that all the strings internally are what are called Unicode, which means that they can represent a wide range of character sets\n- In Python 2, strings sometimes have to go through conversions, since in Py2 there were regular strings and Unicode strings\n\n\n\n## Assignment 6.5\n\nWrite code using find() and string slicing to extract the number at the end of the line below. Convert the extracted value to a floating point number and print it out.\n\nWe start with `text = \"X-DSPAM-Confidence:    0.8475\"`\n\n::: {.cell execution_count=40}\n``` {.python .cell-code}\ntext = \"X-DSPAM-Confidence:    0.8475\"\n\n#find starting point\nspos = text.find(\" \")\nprint(spos)\n\n#extract and clean nr\nextract = float(text[spos+1 :].strip())\nprint(extract)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n19\n0.8475\n```\n:::\n:::\n\n\n",
    "supporting": [
      "1_strings_files/figure-pdf"
    ],
    "filters": []
  }
}