{
  "hash": "084cee454bb568ca03ce37729f3cca46",
  "result": {
    "markdown": "# Networks and sockets\n\n## Transport Control Protocol (TCP)\n\n- Build on top of the Internet Protocol (IP); i.e. a protocol, or set of rules, for routing and addressing packets of data so that they can travel across networks and arrive at the correct destination\n- Assumes IP might lose some data: stores and re-transmits data if it seems to be lost\n- Handles \"flow control\" using a transmit window\n- Provides a nice reliable pipe\n\n\n## TCP connections/sockets\n\nA protocol, or set of rules, for routing and addressing packets of data so that they can travel across networks and arrive at the correct destination\n\nIn computer networking, an Internet socket or network socket is an endpoint of a bidirectional inter-process communication flow across an Internet Protocol-based computer network, such as the Internet.\n\nProcess <-- Internet --> Process\n\n\n## TCP Port Numbers\n\n- A port is an application-specific or process-specific software communications endpoint\n- It allows multiple networked applications to co-exist on the same server\n- There is a list of well-known TCP port numbers, i.e. port 80 is the web port that is connected to a web server\n\n\n## Sockets in Python\n\nPython has build-in support for TCP sockets:\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport socket\n```\n:::\n\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\n#create a socket to create an endpoint on our computer\n#its not yet connected\nmysocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n\n#connect by enter the host (data.pre4.e.org) and the host (80)\n#this is not sending data, its like dialing a phone\nmysocket.connect(('data.pr4e.org', 80))\n\n#close connection\nmysocket.shutdown(socket.SHUT_RDWR)\nmysocket.close()\n```\n:::\n\n\n## Application protocol\n\n- Since the TCP (and Python) gives us a reliable socket, what do we want to do with the socket? What problem do we want to solve?\n- Application Protocols: There are different rules how to talk to for example a mail compared to a web server.\n\n\n## HTTP: Hypertext Transfer Protocol\n\n- The dominant Application Layer Protocol on the Internet\n- Invented for the web to retrieve HTML, Images, Documents, ...\n- Extended to be data in addition to documents: RSS, Web Services, etc. \n- The basic concept is to make a connection, request a document, retrieve the document, close the connection\n- HTTP: The HyperText Transfer Protocol is a set of rules that allow browsers to retrieve web documents from servers over the internet\n- A  **protocol** is a set of rules that all parties follow so we can predict each others behavior and not bump into each other\n\n\n## Getting data from the server\n\nEach time the user clicks on an anchor tag with an `href=` value to switch to a new page, the browser makes a connection to the webserver and issues a `get` request to get the content of the page at the specified URL.  \n\nThe server returns the HTML document to the browser which formats and displays the document to the user.  \n\n\n## Internet standards\n\n- The standards for all of the Internet protocols (inner workings) are developed by an organization, the Internet Engineering Task Force (IETF)\n- www.ietf.org\n- Standards are called **RFCs**, Request for comments\n\n\n## An HTTP Request in python\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nimport socket \n\n#create a socket to create an endpoint on our computer\n#its not yet connected\nmysock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n\n#connect by enter the host (data.pre4.e.org) and the host (80)\n#this is not sending data, its like dialing a phone\nmysock.connect(('data.pr4e.org', 80))\n\n#make a string with an request\ncmd = 'GET http://data.pr4e.org/romeo.txt HTTP/1.0\\r\\n\\r\\n'.encode()\n\n#send request\nmysock.send(cmd)\n\n#receive (recv) up to 512 characters\n#if we don't get data, we break out of the loop\n#if we get data,we decode it\nwhile True:\n    data = mysock.recv(512)\n    if (len(data) < 1):\n        break\n    print(data.decode())\n\n#close connection\nmysock.close()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHTTP/1.1 200 OK\r\nDate: Sat, 10 Dec 2022 11:15:22 GMT\r\nServer: Apache/2.4.18 (Ubuntu)\r\nLast-Modified: Sat, 13 May 2017 11:22:22 GMT\r\nETag: \"a7-54f6609245537\"\r\nAccept-Ranges: bytes\r\nContent-Length: 167\r\nCache-Control: max-age=0, no-cache, no-store, must-revalidate\r\nPragma: no-cache\r\nExpires: Wed, 11 Jan 1984 05:00:00 GMT\r\nConnection: close\r\nContent-Type: text/plain\r\n\r\nBut soft what light through yonder window breaks\nIt is the east and Juliet is the sun\nArise fair sun and kill the envious moon\nWho is already s\nick and pale with grief\n\n```\n:::\n:::\n\n\nAbove we get:\n\n- The HTTP header including the metadata\n- HTTP body\n\n\n## If you want to know more\n\nThis chapter covers networking at a very high level.   If you want to learn more, there is both a free book and a Coursera course that I would recommend:\n\n[Introduction to Networking](http://www.net-intro.com/) (free textbook)\n\n[Internet History, Technology, and Security](https://www.coursera.org/learn/internet-history) (Coursera Course)\n\nNeither of these is essential for this course or the Python Specialization as we quickly move from how the network works to how to write Python code using the urllib library - which makes the very complex Internet protocols exceedingly simple.\n\n\n## Assignment\n\nYou are to retrieve the following document using the HTTP protocol in a way that you can examine the HTTP Response headers.\n\n- http://data.pr4e.org/intro-short.txt\n\nYou might retrieve this web page and look at the response headers: Modify the `socket1.py` program to retrieve the above URL and print out the headers and data. Make sure to change the code to retrieve the above URL - the values are different for each URL.\n\n",
    "supporting": [
      "3_networks_and_sockets_files/figure-pdf"
    ],
    "filters": []
  }
}