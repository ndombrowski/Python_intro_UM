{
  "hash": "4fdbb3ab248189a891f42a7a5033d0cc",
  "result": {
    "markdown": "# JSON and REST\n\n## Javascript Object Notation (JSON)\n\n- Object literal notation in Javascript\n- JSON represents data as nested \"lists\" and \"dictionaries\"\n- Its not as rich as XML but more simpler, making it easier to use\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport json\n\n#curly braces created an object in JSON, which are similar to PY dictionaries\ndata = '''{\n    \"name\": \"Chuck\",\n    \"phone\": {\n        \"type\": \"intl\",\n        \"number\": \"222\"\n    },\n    \"email\": {\n        \"hide\": \"yes\"\n    }\n}'''\n\n#load from string and give us an object back\n#this gives us back a py dictionary\ninfo = json.loads(data)\nprint(info)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{'name': 'Chuck', 'phone': {'type': 'intl', 'number': '222'}, 'email': {'hide': 'yes'}}\n```\n:::\n:::\n\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\n#extract the value using the name key\nprint('Name:', info['name'])\nprint('Hide:', info['email']['hide'])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nName: Chuck\nHide: yes\n```\n:::\n:::\n\n\nAn example of a list:\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nimport json\n\n#generate a list of two dictionaries using the square bracket followed by curly ones\ninput = '''[\n    {\"id\":\"001\",\n    \"x\": \"2\",\n    \"name\": \"Chuck\"\n    },\n    {\"id\": \"009\",\n    \"x\" : \"7\",\n    \"name\": \"Jack\"\n    }\n]'''\n\ninfo = json.loads(input)\nprint(info)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[{'id': '001', 'x': '2', 'name': 'Chuck'}, {'id': '009', 'x': '7', 'name': 'Jack'}]\n```\n:::\n:::\n\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\n#how many users are in this file\nprint('User counts:', len(info))\n\n#exract user data\nfor item in info:\n    print('Name:', item['name'])\n    print('Id', item['id'])\n\nprint('')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nUser counts: 2\nName: Chuck\nId 001\nName: Jack\nId 009\n\n```\n:::\n:::\n\n\n## Service oriented approach\n\n- Most non-trivial web applications use services\n- They use services from other applications, i.e.:\n    - Credit card charge\n    - Hotel reservation systems\n- Services publish the \"rules\" applications must follow to make use of a service (**API**, application programming interface)\n- Initially two systems cooperate and split the problem\n- As the data/service becomes useful, multiple applications want to use the information/application\n\nAnother working example is in `code/geojson.py`\n\nBelow, we work with the GoogleMaps API. We have to pass the address using URL encoding:\n\n```\nhttp://py4e-data.dr-chuck.net/json?address=Den+Helder&key=42\n```\n\nHere:\n\n- Spaces are +\n- `%2C` would be a comma\n\nIf the URL is correct this gives us a JSON back. \n\nWe will talk API keys a bit later.\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\nimport urllib.request, urllib.parse, urllib.error\nimport json\nimport ssl\n\napi_key = False\n# If you have a Google Places API key, enter it here\n# api_key = 'AIzaSy___IDByT70'\n# https://developers.google.com/maps/documentation/geocoding/intro\n\n#An API's service URL is the URL used to consume the API using the configured authentication method\nif api_key is False:\n    api_key = 42\n    serviceurl = 'http://py4e-data.dr-chuck.net/json?'\nelse :\n    serviceurl = 'https://maps.googleapis.com/maps/api/geocode/json?'\n\n# Ignore SSL certificate errors\nctx = ssl.create_default_context()\nctx.check_hostname = False\nctx.verify_mode = ssl.CERT_NONE\n\naddress = 'Den Helder'\n\nparms = dict()\nparms['address'] = address\nif api_key is not False: parms['key'] = api_key\n\n#add the location to the service URL in the right way\nurl = serviceurl + urllib.parse.urlencode(parms)\nprint('Retrieving', url)\n\n#get the data handle\nuh = urllib.request.urlopen(url, context=ctx)\ndata = uh.read().decode()\nprint('Retrieved', len(data), 'characters')\n\ntry:\n    js = json.loads(data)\nexcept:\n    js = None\n\n#ensure that we got good data\n#quit if we got nothing, or no status key\n#in r this gives an error but runs fine in the executable code\n#if not js or 'status' not in js or js['status'] != 'OK':\n#    print(data)\n#    continue\n\n#look at data in a readable format\n#print(json.dumps(js, indent=4))\n\n#walk down the tree to get the data\nlat = js['results'][0]['geometry']['location']['lat']\nlng = js['results'][0]['geometry']['location']['lng']\nprint('lat', lat, 'lng', lng)\n\nlocation = js['results'][0]['formatted_address']\nprint(location)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRetrieving http://py4e-data.dr-chuck.net/json?address=Den+Helder&key=42\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nRetrieved 1735 characters\nlat 52.95628079999999 lng 4.7607972\nDen Helder, Netherlands\n```\n:::\n:::\n\n\n## API security and rate limiting\n\n- The compute resources to run these APIs are not free\n- The data provided by these APIs is usually valuable\n- The data providers might limit the number of requests per day, demand an API key or even charge for usage\n- Some APIs, i.e. twitter, require you to be authorized\n- They might change the rules as things progress\n\nAn example is found in `code/twitter2.py`\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\nimport urllib.request, urllib.parse, urllib.error\n#notice, this only works if twurl.py and dependency py files are in the same dir\nimport twurl\nimport json\nimport ssl\n\n# https://apps.twitter.com/\n# Create App and get the four strings, put them in hidden.py\n\n#read in twitter service url\nTWITTER_URL = 'https://api.twitter.com/1.1/friends/list.json'\n\n# Ignore SSL certificate errors\nctx = ssl.create_default_context()\nctx.check_hostname = False\nctx.verify_mode = ssl.CERT_NONE\n\nwhile True:\n    print('')\n    acct = input('Enter Twitter Account:')\n    if (len(acct) < 1): break\n    url = twurl.augment(TWITTER_URL,\n                        {'screen_name': acct, 'count': '5'})\n    print('Retrieving', url)\n    \n    connection = urllib.request.urlopen(url, context=ctx)\n    data = connection.read().decode()\n\n    js = json.loads(data)\n    print(json.dumps(js, indent=2))\n\n    #urllib eats the headers, but we can retrieve them like this:\n    #this line shows us how many requests we still have\n    headers = dict(connection.getheaders())\n    print('Remaining', headers['x-rate-limit-remaining'])\n\n    for u in js['users']:\n        print(u['screen_name'])\n        if 'status' not in u:\n            print('   * No status found')\n            continue\n        s = u['status']['text']\n        print('  ', s[:50])\n\nprint('')\n```\n:::\n\n\n## Exercise 1: Extract data from JSON\n\nThe program will prompt for a URL, read the JSON data from that URL using urllib and then parse and extract the comment counts from the JSON data, compute the sum of the numbers in the file and enter the sum below:\n\nWe provide two files for this assignment. One is a sample file where we give you the sum for your testing and the other is the actual data you need to process for the assignment.\n\n- Sample data: http://py4e-data.dr-chuck.net/comments_42.json (Sum=2553)\n- Actual data: http://py4e-data.dr-chuck.net/comments_1701462.json (Sum ends with 0)  \n\nYou do not need to save these files to your folder since your program will read the data directly from the URL. Note: Each student will have a distinct data url for the assignment - so only use your own data url for analysis.\n\nThe data consists of a number of names and comment counts in JSON as follows:\n\n```\n{\n  comments: [\n    {\n      name: \"Matthias\"\n      count: 97\n    },\n    {\n      name: \"Geomer\"\n      count: 97\n    }\n    ...\n  ]\n}\n```\n\nThis is what we want to get:\n\n```\n$ python3 solution.py\nEnter location: http://py4e-data.dr-chuck.net/comments_42.json\nRetrieving http://py4e-data.dr-chuck.net/comments_42.json\nRetrieved 2733 characters\nCount: 50\nSum: 2...\n```\n\nCode is found in `code/extract_data_json.py`\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\nimport urllib.request, urllib.parse, urllib.error\nimport json\nimport ssl \n\n# Ignore SSL certificate errors\nctx = ssl.create_default_context()\nctx.check_hostname = False\nctx.verify_mode = ssl.CERT_NONE\n\n#get data\nurl='http://py4e-data.dr-chuck.net/comments_1701462.json'\ninput = urllib.request.urlopen(url, context=ctx)\ndata = input.read()\n\n#convert\ninfo = json.loads(data)\n\n#extract counts\nnum_list = list()\n\nfor item in info['comments']:\n    num = int(item['count'])\n    num_list.append(num)\n\nprint('Sum:', sum(num_list))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSum: 2300\n```\n:::\n:::\n\n\n## Exercise 2: Using the GeoJSON API\n\nThe program will prompt for a location, contact a web service and retrieve JSON for the web service and parse that data, and retrieve the first place_id from the JSON. A place ID is a textual identifier that uniquely identifies a place as within Google Maps.\n\nTo complete this assignment, you should use this API endpoint that has a static subset of the Google Data:\n\n```\nhttp://py4e-data.dr-chuck.net/json?\n```\n\nThis API uses the same parameter (address) as the Google API. This API also has no rate limit so you can test as often as you like. If you visit the URL with no parameters, you get \"No address...\" response.\n\nTo call the API, you need to include a key= parameter and provide the address that you are requesting as the address= parameter that is properly URL encoded using the urllib.parse.urlencode() function.\n\nYou can test to see if your program is working with a location of \"South Federal University\" which will have a place_id of \"ChIJNeHD4p-540AR2Q0_ZjwmKJ8\".\n\n```\n$ python3 solution.py\nEnter location: South Federal University\nRetrieving http://...\nRetrieved 2445 characters\nPlace id ChIJNeHD4p-540AR2Q0_ZjwmKJ8\n```\n\nPlease run your program to find the place_id for this location: Marietta College.\n\nCode is in `code/geojson_ex.py`\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\nimport urllib.request, urllib.parse, urllib.error\nimport json\nimport ssl\n\napi_key = False\n# If you have a Google Places API key, enter it here\n# api_key = 'AIzaSy___IDByT70'\n# https://developers.google.com/maps/documentation/geocoding/intro\n\nif api_key is False:\n    api_key = 42\n    serviceurl = 'http://py4e-data.dr-chuck.net/json?'\nelse :\n    serviceurl = 'https://maps.googleapis.com/maps/api/geocode/json?'\n\n# Ignore SSL certificate errors\nctx = ssl.create_default_context()\nctx.check_hostname = False\nctx.verify_mode = ssl.CERT_NONE\n\nwhile True:\n    address = input('Enter location: ')\n    if len(address) < 1: break\n\n    parms = dict()\n    parms['address'] = address\n    if api_key is not False: parms['key'] = api_key\n    url = serviceurl + urllib.parse.urlencode(parms)\n\n    print('Retrieving', url)\n    uh = urllib.request.urlopen(url, context=ctx)\n    data = uh.read().decode()\n    print('Retrieved', len(data), 'characters')\n\n    try:\n        js = json.loads(data)\n    except:\n        js = None\n\n    if not js or 'status' not in js or js['status'] != 'OK':\n        print('==== Failure To Retrieve ====')\n        print(data)\n        continue\n\n    print(json.dumps(js, indent=4))\n\n    lat = js['results'][0]['geometry']['location']['lat']\n    lng = js['results'][0]['geometry']['location']['lng']\n    print('lat', lat, 'lng', lng)\n    location = js['results'][0]['formatted_address']\n    print(location)\n```\n:::\n\n\n",
    "supporting": [
      "6_JSON_and_REST_files/figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}